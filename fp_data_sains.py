# -*- coding: utf-8 -*-
"""FP Data Sains.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kNOjPGtNvkSlmuTSWNt02ysljUWAqkyE
"""

# Load the obesitas.csv dataset and show basic info and head
import pandas as pd

df_obes = pd.read_csv('obesitas.csv')
print(df_obes.head())
print('\
Class distribution:')
print(df_obes['NObeyesdad'].value_counts())

# Project: Obesity Classification – Tahap 1-3
# 1. Load data, preprocessing, EDA (ringkas)
# 2. Build ML pipeline & evaluate
# 3. Save trained pipeline

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
import joblib

# --- Tahap 1: Prapemrosesan & EDA ---

df = pd.read_csv('obesitas.csv')

# Tambah fitur BMI
# berat sudah kg, tinggi meter
# tangani pembagi nol via np.where
bmi = df['Weight'] / np.where(df['Height'] == 0, np.nan, df['Height'] ** 2)
df['BMI'] = bmi

# Cek nilai hilang
missing = df.isna().sum()
print('Missing values per kolom:')
print(missing[missing > 0])

# Korelasi numerik singkat
num_cols = ['Age', 'Height', 'Weight', 'BMI']
plt.figure(figsize=(6,4))
sns.heatmap(df[num_cols].corr(), annot=True, cmap='magma')
plt.title('Korelasi Numerik')
plt.tight_layout()
plt.show()

# Tampilkan distribusi target
plt.figure(figsize=(6,3))
sns.countplot(x='NObeyesdad', data=df, order=df['NObeyesdad'].value_counts().index)
plt.title('Distribusi Kelas')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print('Head setelah tambah BMI:')
print(df.head())

# --- Tahap 2: Pemodelan ---

y = df['NObeyesdad']
X = df.drop('NObeyesdad', axis=1)

cat_cols = X.select_dtypes(include=['object']).columns.tolist()
num_cols = [c for c in X.columns if c not in cat_cols]

preprocessor = ColumnTransformer([
    ('num', StandardScaler(), num_cols),
    ('cat', OneHotEncoder(handle_unknown='ignore'), cat_cols)
])

model = RandomForestClassifier(random_state=42)

pipe = Pipeline([
    ('prep', preprocessor),
    ('clf', model)
])

param_dist = {
    'clf__n_estimators': [100, 200, 300],
    'clf__max_depth': [None, 10, 20, 30],
    'clf__min_samples_split': [2, 5, 10]
}

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

rs = RandomizedSearchCV(pipe, param_distributions=param_dist, n_iter=10, cv=5, verbose=0, n_jobs=-1)
rs.fit(X_train, y_train)

print('Best params:')
print(rs.best_params_)

# --- Tahap 3: Evaluasi ---
y_pred = rs.predict(X_test)
print('Classification Report:')
print(classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred, labels=rs.classes_)
fig, ax = plt.subplots(figsize=(6,6))
ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rs.classes_).plot(ax=ax, xticks_rotation=45, cmap='Blues')
plt.title('Confusion Matrix')
plt.tight_layout()
plt.show()

# Simpan pipeline
joblib.dump(rs.best_estimator_, 'obesity_pipeline.pkl')
print('Model saved as obesity_pipeline.pkl')

# app.py  –  Streamlit Obesity Classifier
import streamlit as st
import pandas as pd
import numpy as np
import joblib

st.title('Obesity Category Predictor')

# muat pipeline
model = joblib.load('obesity_pipeline.pkl')

# widget input
gender = st.selectbox('Gender', ['Male', 'Female'])
age = st.number_input('Age (years)', 10, 90, 25)
height = st.number_input('Height (m)', 1.2, 2.5, 1.70, step=0.01)
weight = st.number_input('Weight (kg)', 30.0, 200.0, 70.0, step=0.1)
family_history = st.selectbox('Family history with overweight', ['yes', 'no'])
favc = st.selectbox('Frequent high-caloric food (FAVC)', ['yes', 'no'])
fcvc = st.slider('Veggies consumption (FCVC)', 1, 3, 2)
ncp  = st.slider('Meals per day (NCP)', 1, 4, 3)
caec = st.selectbox('Snacks (CAEC)', ['no', 'Sometimes', 'Frequently', 'Always'])
smoke = st.selectbox('SMOKE', ['yes', 'no'])
ch2o = st.slider('Water cups / day (CH2O)', 1, 3, 2)
scc = st.selectbox('Calories monitoring (SCC)', ['yes', 'no'])
faf = st.slider('Physical activity (hrs) FAF', 0.0, 3.0, 1.0, step=0.25)
tue = st.slider('Technology use hrs (TUE)', 0.0, 2.0, 1.0, step=0.25)
calc = st.selectbox('Alcohol (CALC)', ['no', 'Sometimes', 'Frequently', 'Always'])
mtrans = st.selectbox('Transportation', ['Public_Transportation','Walking','Automobile','Motorbike','Bike'])

if st.button('Predict'):
    # bentuk dataframe sesuai urutan kolom asli
    row = pd.DataFrame([{
        'Gender': gender, 'Age': age, 'Height': height, 'Weight': weight,
        'family_history_with_overweight': family_history,
        'FAVC': favc, 'FCVC': fcvc, 'NCP': ncp, 'CAEC': caec, 'SMOKE': smoke,
        'CH2O': ch2o, 'SCC': scc, 'FAF': faf, 'TUE': tue, 'CALC': calc,
        'MTRANS': mtrans
    }])
    pred = model.predict(row)[0]
    st.success('Predicted category: ' + pred)